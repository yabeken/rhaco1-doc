* テスト

rhaco では，SimpleTest 等の外部ライブラリに依存せずにテストコードを記述することが可能です．
テストコードを記述する際には，下記2通りの記述が可能となっています．

- コード内にコメントとして記述する DocTest
- 外部ファイルに PHP として記述する UnitTest

** DocTest

DocTest は，その名の通りコード内にコメントとして記述するテストです．

例
>|php|
<?php
class Calc{
	function add($arg1,$arg2){
		/***
			$calc = new Calc();
			eq(1,$hoge->add(1,0));
			eq(2,$hoge->add(5,-3));
		*/
		return $arg1 + $arg2;
	}
}
||<

このように，"/***" から "*/" までのコードをテストコードとして実行します．
単純なライブラリの場合には DocTest のみテストを記述する事が出来ます．
場合によっては，そのメソッドの使い方の参考ともなります．

DocTest で使用できるテストメソッドは次の通りです．

- eq
-- 期待値と返値が等しいことを検証する．
- neq
-- 期待値と返値が等しくないことを検証する．
- assert
-- 返値が真であることを検証する．
- unit
-- ユニットテストを実行する．

>|php|
/***
	eq($expected,$result,$comment);
	neq($expected,$result,$comment);
	assert($result,$comment);
	unit("path.to.UnitTestClass");
*/
||<

** UnitTest

UnitTest はテストをクラスファイルとして用意します．
UnitTest は必ず，util.UnitTest を継承している必要があります．

UnitTest は， setup/tests/ 以下に配置します．
各テストは，メソッドとして実行しメソッド名が "test" で始まっている必要があります．

setup/tests/HogeTest.php
>|php|
class HogeTest extends UnitTest{
	/**
	 * ユニットテスト実行前に呼ばれる
	 */
	function begin(){
	}
	/**
	 * ユニットテスト実行後に呼ばれる
	 */
	function finish(){
	}
	/**
	 * テスト実行前に呼ばれる
	 */
	function setUp(){
	}
	/**
	 * テスト実行後に呼ばれる
	 */
	function tearDown(){
	}
	/**
	 * hogehoge テスト
	 */
	function testHogehoge(){
		$this->assertEquals(true,false,"失敗");
	}
}
||<


* テストの実行

テストの実行は，setup.php より test ページにて行います．

//TODO 画像

** 外部ディレクトリのテスト

rhaco は標準では application root 以下のファイルしかテストを行えませんが， project.xml に次の記述を行うことで外部ディレクトリのテストを行うことが可能となります．

>|xml|
<project>
	<define name="EX_TESTS_DIR" value="/path/to/external/dir"/>
</project>
||<

私は， htdocs, webapp と分けて居ますので次のように記述することが多いです．

>|xml|
<project>
	<define name="EX_TESTS_DIR" value="{$rhaco.lib()}"/>
</project>
||<
