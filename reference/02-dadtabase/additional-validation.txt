* 検証処理を追加する

rhaco では、標準でよく利用される様々な制限を project.xml に記述することができます。
しかし、データベースと連携した検証など、単純には行かないケースが多々あります。

こういう処理はついビューに書いてしまいそうになりますが、決してそれを行ってはいけません。
rhaco では、そのための方法が用意されています。

モデルに verifyHoge というように、"verify" がつくメソッドがあれば、検証時に自動的に呼び出されます。

>||
<?php
Rhaco::import("model.table.HogeTable");
class Hoge extends HogeTable{
      /**
       * hoge を検証する
       * @param DbUtil $db
       * @return boolean
       */
      function verifyHoge(&$db){
      	       return false;
      }
}

?>
||<

** メールアドレス確認のための再入力処理

これも、個人情報登録処理ではよくありますね！
こういう場合には、extra という仮想列を利用します。

>||
<project>
	<database name="sample">
		  <table name="member">
		  	 <column name="id" type="serial"/>
			 <column name="name" type="string" require="true"/>
			 <column name="email" type="email" require="true"/>
			 <extra name="email_confirm" type="string"/>
		  </table>
	</database>
</project>
||<

で、モデルに検証のための追加メソッドを宣言します。

>||
<?php
Rhaco::import("model.table.MemberTable");
Rhaco::import("exception.ExceptionTrigger");
/**
 * 個人情報
 */
class Member extends MemberTable{
      /**
       * メールアドレスを確認する
       * @return boolean
       */
      function verifyEmail(){
      	       if($this->getEmail()!=$this->getEmailConfirm()){
			return ExceptionTrigger(new GenericException("メールアドレスを確認してください"));
	       }
      	       return true;
      }
}

?>
||<

これで、メールアドレスの正当性のチェックは全て email で行い、email_confirm では、email と同じかどうかだけをチェックするだけになります。

* 参考

- [http://blog.shigepon.com/snippet61]
- [http://d.hatena.ne.jp/yabeken/20090818/1250572513]
