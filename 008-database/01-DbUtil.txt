* データベース操作

データベースの操作には，DbUtil を使用します．
データベース接続までの手順は次の通りです．

+ project.xml にデータベース定義を記述．[[005-project/01-project.xml]]を参照のこと．
+ setup.php より，モデルを生成．
+ setup.php より，接続情報の設定．

ここでは，次のデータベース定義を用います．

>|xml|
<project>
	<database name="sample">
		  <description>サンプル</description>
		  <table name="profile">
		  	 <column name="id" type="serial" />
			 <column name="name" type="string" label="名前" />
			 <column name="age" type="integer" label="年齢" />
		  </table>
	</database>
</project>
||<

** 接続

setup.php にて行った接続情報は，__settings__.php に書き出され，Profile::connection() より取得できます．

>|php|
<?php
require_once dirname(__FILE__)."/__init__.php";
Rhaco::import("database.DbUtil");
Rhaco::import("model.Profile");

//データベースへ接続
$db = new DbUtil(Profile::connection());
||<

** select

>|sql|
select * from profile
||<

>|php|
<?php
//:

$profileList = $db->select(new Profile());
||<

*** get

1行目だけを取得します

>|sql|
select * from profile offset 0 limit 1
||<

>|php|
<?php
//:

$profile = $db->get(new Profile());
||<

** insert

>|sql|
insert into profile (name,age) values ('らこ',18)
||<

>|php|
<?php
//:

$profile = new Profile();
$profile->setName("らこ");
$profile->setAge(18);

$db->insert($profile);
||<

** update

>|sql|
update profile set name='らこ', age='18'
||<

>|php|
<?php
//:

$profile = new Profile();
$profile->setName("らこ");
$profile->setAge(18);

$db->update($profile);
||<

** delete

>|sql|
delete from profile
||<

>|php|
<?php
//:

$db->delete(new Profile());
||<

** というわけで

ここでは，データベースへの接続と単純なSQL文の発行を示しました．
次は，WHERE句の発行方法を説明します．

API については，[http://api.rhaco-users.jp/:title=こちら]をご覧ください．
